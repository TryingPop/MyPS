using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

/*
날짜 : 2024. 11. 11
이름 : 배성훈
내용 : 카드
    문제번호 : 11652번

    자료 구조, 정렬, 해시를 사용한 집합과 맵 문제다.
    Dictionary를 이용하면 된다.
    개인 딕셔너리를 구현해 풀었다.
*/

namespace BaekJoon.etc
{
    internal class etc_1103
    {

        class MyDictionary<TKey, TVal>
        {

            int[] primes = new int[2_000] { 2, 1009, 2003, 3001, 4001, 5003, 6007, 7001, 8009, 9001, 10007, 11003, 12007, 13001, 14009, 15013, 16001, 17011, 18013, 19001, 20011, 21001, 22003, 23003, 24001, 25013, 26003, 27011, 28001, 29009, 30011, 31013, 32003, 33013, 34019, 35023, 36007, 37003, 38011, 39019, 40009, 41011, 42013, 43003, 44017, 45007, 46021, 47017, 48017, 49003, 50021, 51001, 52009, 53003, 54001, 55001, 56003, 57037, 58013, 59009, 60013, 61001, 62003, 63029, 64007, 65003, 66029, 67003, 68023, 69001, 70001, 71011, 72019, 73009, 74017, 75011, 76001, 77003, 78007, 79031, 80021, 81001, 82003, 83003, 84011, 85009, 86011, 87011, 88001, 89003, 90001, 91009, 92003, 93001, 94007, 95003, 96001, 97001, 98009, 99013, 100003, 101009, 102001, 103001, 104003, 105019, 106013, 107021, 108007, 109001, 110017, 111029, 112019, 113011, 114001, 115001, 116009, 117017, 118033, 119027, 120011, 121001, 122011, 123001, 124001, 125003, 126001, 127031, 128021, 129001, 130003, 131009, 132001, 133013, 134033, 135007, 136013, 137029, 138007, 139021, 140009, 141023, 142007, 143053, 144013, 145007, 146009, 147011, 148013, 149011, 150001, 151007, 152003, 153001, 154001, 155003, 156007, 157007, 158003, 159013, 160001, 161009, 162007, 163003, 164011, 165001, 166013, 167009, 168013, 169003, 170003, 171007, 172001, 173021, 174007, 175003, 176017, 177007, 178001, 179021, 180001, 181001, 182009, 183023, 184003, 185021, 186007, 187003, 188011, 189011, 190027, 191021, 192007, 193003, 194003, 195023, 196003, 197003, 198013, 199021, 200003, 201007, 202001, 203011, 204007, 205019, 206009, 207013, 208001, 209021, 210011, 211007, 212029, 213019, 214003, 215051, 216023, 217001, 218003, 219001, 220009, 221021, 222007, 223007, 224011, 225023, 226001, 227011, 228013, 229003, 230003, 231001, 232003, 233021, 234007, 235003, 236017, 237011, 238001, 239017, 240007, 241013, 242009, 243011, 244003, 245023, 246011, 247001, 248021, 249017, 250007, 251003, 252001, 253003, 254003, 255007, 256019, 257003, 258019, 259001, 260003, 261011, 262007, 263009, 264007, 265003, 266003, 267017, 268003, 269023, 270001, 271003, 272003, 273001, 274007, 275003, 276007, 277003, 278017, 279001, 280001, 281023, 282001, 283001, 284003, 285007, 286001, 287003, 288007, 289001, 290011, 291007, 292021, 293021, 294001, 295007, 296011, 297019, 298013, 299011, 300007, 301013, 302009, 303007, 304009, 305017, 306011, 307009, 308003, 309007, 310019, 311009, 312007, 313003, 314003, 315011, 316003, 317003, 318001, 319001, 320009, 321007, 322001, 323003, 324011, 325001, 326023, 327001, 328007, 329009, 330017, 331013, 332009, 333019, 334021, 335009, 336029, 337013, 338017, 339023, 340007, 341017, 342037, 343019, 344017, 345001, 346013, 347003, 348001, 349007, 350003, 351011, 352007, 353011, 354001, 355007, 356023, 357031, 358031, 359003, 360007, 361001, 362003, 363017, 364027, 365003, 366001, 367001, 368021, 369007, 370003, 371027, 372013, 373003, 374009, 375017, 376001, 377011, 378011, 379007, 380041, 381001, 382001, 383011, 384001, 385001, 386017, 387007, 388009, 389003, 390001, 391009, 392011, 393007, 394007, 395023, 396001, 397013, 398011, 399023, 400009, 401017, 402023, 403001, 404009, 405001, 406013, 407023, 408011, 409007, 410009, 411001, 412001, 413009, 414013, 415013, 416011, 417007, 418007, 419047, 420001, 421009, 422029, 423001, 424001, 425003, 426007, 427001, 428003, 429007, 430007, 431017, 432001, 433003, 434009, 435037, 436003, 437011, 438001, 439007, 440009, 441011, 442003, 443011, 444001, 445001, 446003, 447001, 448003, 449003, 450001, 451013, 452009, 453023, 454009, 455003, 456007, 457001, 458009, 459007, 460013, 461009, 462013, 463003, 464003, 465007, 466009, 467003, 468001, 469009, 470021, 471007, 472019, 473009, 474017, 475037, 476009, 477011, 478001, 479023, 480013, 481001, 482017, 483017, 484019, 485021, 486023, 487007, 488003, 489001, 490001, 491003, 492007, 493001, 494023, 495017, 496007, 497011, 498013, 499021, 500009, 501001, 502001, 503003, 504001, 505027, 506047, 507029, 508009, 509023, 510007, 511001, 512009, 513001, 514001, 515041, 516017, 517003, 518017, 519011, 520019, 521009, 522017, 523007, 524047, 525001, 526027, 527053, 528001, 529003, 530017, 531017, 532001, 533003, 534007, 535013, 536017, 537001, 538001, 539003, 540041, 541001, 542021, 543017, 544001, 545023, 546001, 547007, 548003, 549001, 550007, 551003, 552001, 553013, 554003, 555029, 556007, 557017, 558007, 559001, 560017, 561019, 562007, 563009, 564013, 565013, 566011, 567011, 568019, 569003, 570001, 571001, 572023, 573007, 574003, 575009, 576001, 577007, 578021, 579011, 580001, 581029, 582011, 583007, 584011, 585019, 586009, 587017, 588011, 589021, 590021, 591023, 592019, 593003, 594023, 595003, 596009, 597031, 598007, 599003, 600011, 601021, 602029, 603011, 604001, 605009, 606017, 607001, 608011, 609043, 610031, 611011, 612011, 613007, 614041, 615019, 616003, 617011, 618029, 619007, 620003, 621007, 622009, 623003, 624007, 625007, 626009, 627017, 628013, 629003, 630017, 631003, 632029, 633001, 634003, 635003, 636017, 637001, 638023, 639007, 640007, 641051, 642011, 643009, 644009, 645011, 646003, 647011, 648007, 649001, 650011, 651017, 652019, 653033, 654001, 655001, 656023, 657017, 658001, 659011, 660001, 661009, 662003, 663001, 664009, 665011, 666013, 667013, 668009, 669023, 670001, 671003, 672019, 673019, 674017, 675029, 676007, 677011, 678023, 679033, 680003, 681001, 682001, 683003, 684007, 685001, 686003, 687007, 688003, 689021, 690037, 691001, 692009, 693019, 694019, 695003, 696019, 697009, 698017, 699001, 700001, 701009, 702007, 703013, 704003, 705011, 706001, 707011, 708007, 709043, 710009, 711001, 712007, 713021, 714029, 715019, 716003, 717001, 718007, 719009, 720007, 721003, 722011, 723029, 724001, 725009, 726007, 727003, 728003, 729019, 730003, 731033, 732023, 733003, 734003, 735001, 736007, 737017, 738011, 739003, 740011, 741001, 742009, 743027, 744019, 745001, 746017, 747037, 748003, 749011, 750019, 751001, 752009, 753001, 754003, 755009, 756011, 757019, 758003, 759001, 760007, 761003, 762001, 763001, 764003, 765007, 766021, 767017, 768013, 769003, 770027, 771011, 772001, 773021, 774001, 775007, 776003, 777001, 778013, 779003, 780029, 781003, 782003, 783007, 784009, 785003, 786001, 787021, 788009, 789001, 790003, 791003, 792023, 793043, 794009, 795001, 796001, 797003, 798023, 799003, 800011, 801001, 802007, 803027, 804007, 805019, 806009, 807011, 808019, 809023, 810013, 811037, 812011, 813013, 814003, 815029, 816019, 817013, 818011, 819001, 820037, 821003, 822007, 823001, 824017, 825001, 826019, 827009, 828007, 829001, 830003, 831023, 832003, 833009, 834007, 835001, 836047, 837017, 838003, 839009, 840023, 841003, 842003, 843043, 844001, 845003, 846037, 847009, 848017, 849019, 850009, 851009, 852011, 853007, 854017, 855031, 856021, 857009, 858001, 859003, 860009, 861001, 862009, 863003, 864007, 865001, 866003, 867001, 868019, 869017, 870007, 871001, 872017, 873017, 874001, 875011, 876011, 877003, 878011, 879001, 880001, 881003, 882017, 883013, 884003, 885023, 886007, 887017, 888001, 889001, 890003, 891001, 892019, 893003, 894011, 895003, 896003, 897007, 898013, 899009, 900001, 901007, 902009, 903017, 904019, 905011, 906007, 907019, 908003, 909019, 910003, 911003, 912007, 913013, 914021, 915007, 916031, 917003, 918011, 919013, 920011, 921001, 922021, 923017, 924019, 925019, 926017, 927001, 928001, 929003, 930011, 931003, 932003, 933001, 934001, 935003, 936007, 937003, 938017, 939007, 940001, 941009, 942013, 943003, 944003, 945031, 946003, 947027, 948007, 949001, 950009, 951001, 952001, 953023, 954001, 955037, 956003, 957031, 958007, 959009, 960017, 961003, 962009, 963019, 964009, 965023, 966011, 967003, 968003, 969011, 970027, 971021, 972001, 973001, 974003, 975011, 976009, 977021, 978001, 979001, 980027, 981011, 982021, 983063, 984007, 985003, 986023, 987013, 988007, 989011, 990001, 991009, 992011, 993001, 994013, 995009, 996001, 997001, 998009, 999007, 1000003, 1001003, 1002017, 1003001, 1004027, 1005007, 1006003, 1007021, 1008001, 1009007, 1010003, 1011001, 1012007, 1013003, 1014007, 1015009, 1016009, 1017007, 1018007, 1019023, 1020001, 1021001, 1022011, 1023019, 1024021, 1025009, 1026029, 1027001, 1028003, 1029001, 1030019, 1031003, 1032007, 1033001, 1034003, 1035007, 1036001, 1037041, 1038001, 1039001, 1040021, 1041041, 1042001, 1043011, 1044019, 1045003, 1046029, 1047031, 1048007, 1049011, 1050011, 1051003, 1052027, 1053007, 1054003, 1055017, 1056007, 1057003, 1058009, 1059001, 1060009, 1061033, 1062001, 1063001, 1064017, 1065011, 1066001, 1067009, 1068019, 1069001, 1070009, 1071023, 1072009, 1073053, 1074001, 1075007, 1076003, 1077017, 1078001, 1079009, 1080007, 1081027, 1082017, 1083007, 1084001, 1085003, 1086031, 1087001, 1088023, 1089017, 1090003, 1091003, 1092019, 1093007, 1094011, 1095023, 1096031, 1097009, 1098017, 1099031, 1100009, 1101071, 1102001, 1103009, 1104017, 1105009, 1106029, 1107019, 1108001, 1109021, 1110007, 1111007, 1112003, 1113011, 1114019, 1115011, 1116001, 1117009, 1118003, 1119029, 1120001, 1121011, 1122001, 1123051, 1124027, 1125001, 1126031, 1127011, 1128031, 1129013, 1130011, 1131023, 1132003, 1133009, 1134031, 1135007, 1136041, 1137001, 1138019, 1139003, 1140091, 1141009, 1142003, 1143013, 1144001, 1145003, 1146037, 1147009, 1148029, 1149007, 1150027, 1151021, 1152023, 1153001, 1154017, 1155001, 1156009, 1157011, 1158007, 1159001, 1160009, 1161001, 1162009, 1163003, 1164001, 1165001, 1166021, 1167011, 1168001, 1169009, 1170007, 1171031, 1172009, 1173001, 1174021, 1175003, 1176023, 1177009, 1178003, 1179011, 1180009, 1181017, 1182007, 1183003, 1184003, 1185013, 1186001, 1187003, 1188001, 1189003, 1190011, 1191011, 1192013, 1193011, 1194019, 1195021, 1196003, 1197011, 1198013, 1199039, 1200007, 1201001, 1202009, 1203019, 1204003, 1205027, 1206013, 1207001, 1208017, 1209007, 1210003, 1211027, 1212011, 1213007, 1214011, 1215017, 1216009, 1217009, 1218017, 1219003, 1220027, 1221019, 1222003, 1223003, 1224029, 1225009, 1226011, 1227047, 1228001, 1229021, 1230013, 1231001, 1232003, 1233019, 1234001, 1235021, 1236017, 1237001, 1238023, 1239001, 1240007, 1241003, 1242001, 1243003, 1244003, 1245001, 1246013, 1247009, 1248001, 1249013, 1250003, 1251011, 1252021, 1253011, 1254013, 1255013, 1256009, 1257013, 1258001, 1259017, 1260011, 1261033, 1262011, 1263007, 1264009, 1265029, 1266019, 1267009, 1268011, 1269001, 1270001, 1271027, 1272001, 1273001, 1274011, 1275011, 1276001, 1277011, 1278007, 1279001, 1280023, 1281029, 1282007, 1283011, 1284007, 1285021, 1286011, 1287007, 1288003, 1289003, 1290013, 1291001, 1292009, 1293001, 1294019, 1295003, 1296007, 1297001, 1298027, 1299007, 1300021, 1301011, 1302017, 1303009, 1304003, 1305011, 1306001, 1307051, 1308011, 1309013, 1310033, 1311001, 1312001, 1313041, 1314011, 1315003, 1316009, 1317013, 1318003, 1319023, 1320019, 1321007, 1322003, 1323001, 1324007, 1325011, 1326001, 1327009, 1328003, 1329011, 1330001, 1331023, 1332017, 1333019, 1334057, 1335007, 1336003, 1337003, 1338013, 1339001, 1340011, 1341007, 1342001, 1343003, 1344011, 1345009, 1346003, 1347001, 1348001, 1349003, 1350001, 1351019, 1352069, 1353007, 1354007, 1355021, 1356007, 1357001, 1358009, 1359023, 1360027, 1361011, 1362017, 1363027, 1364009, 1365011, 1366009, 1367017, 1368013, 1369009, 1370027, 1371001, 1372027, 1373027, 1374007, 1375007, 1376003, 1377023, 1378001, 1379003, 1380007, 1381027, 1382021, 1383037, 1384013, 1385003, 1386013, 1387007, 1388003, 1389001, 1390003, 1391011, 1392007, 1393003, 1394009, 1395001, 1396001, 1397021, 1398011, 1399003, 1400017, 1401007, 1402003, 1403009, 1404059, 1405007, 1406011, 1407011, 1408007, 1409017, 1410007, 1411013, 1412009, 1413001, 1414001, 1415023, 1416007, 1417019, 1418009, 1419001, 1420009, 1421011, 1422007, 1423003, 1424021, 1425007, 1426003, 1427017, 1428013, 1429027, 1430027, 1431007, 1432001, 1433011, 1434011, 1435001, 1436003, 1437011, 1438001, 1439017, 1440011, 1441001, 1442003, 1443007, 1444007, 1445033, 1446001, 1447001, 1448003, 1449001, 1450019, 1451003, 1452047, 1453003, 1454003, 1455007, 1456001, 1457011, 1458011, 1459027, 1460003, 1461001, 1462001, 1463009, 1464011, 1465007, 1466039, 1467001, 1468079, 1469047, 1470023, 1471007, 1472017, 1473011, 1474003, 1475003, 1476001, 1477001, 1478017, 1479007, 1480001, 1481003, 1482007, 1483003, 1484009, 1485013, 1486003, 1487009, 1488007, 1489003, 1490011, 1491001, 1492009, 1493027, 1494019, 1495003, 1496009, 1497019, 1498001, 1499011, 1500007, 1501009, 1502021, 1503017, 1504033, 1505003, 1506007, 1507007, 1508033, 1509019, 1510013, 1511017, 1512019, 1513013, 1514027, 1515011, 1516007, 1517023, 1518001, 1519039, 1520003, 1521011, 1522009, 1523003, 1524007, 1525021, 1526053, 1527017, 1528001, 1529009, 1530019, 1531021, 1532009, 1533029, 1534019, 1535011, 1536011, 1537001, 1538011, 1539011, 1540003, 1541003, 1542007, 1543007, 1544003, 1545001, 1546003, 1547009, 1548031, 1549003, 1550027, 1551001, 1552007, 1553009, 1554019, 1555013, 1556003, 1557001, 1558009, 1559017, 1560007, 1561003, 1562051, 1563017, 1564001, 1565009, 1566031, 1567001, 1568033, 1569011, 1570007, 1571023, 1572017, 1573009, 1574003, 1575011, 1576007, 1577021, 1578001, 1579001, 1580003, 1581007, 1582001, 1583003, 1584001, 1585007, 1586023, 1587007, 1588019, 1589017, 1590019, 1591001, 1592027, 1593029, 1594027, 1595003, 1596013, 1597033, 1598011, 1599023, 1600033, 1601023, 1602011, 1603009, 1604003, 1605001, 1606009, 1607003, 1608007, 1609009, 1610009, 1611031, 1612007, 1613033, 1614001, 1615001, 1616009, 1617019, 1618003, 1619021, 1620001, 1621019, 1622009, 1623023, 1624009, 1625017, 1626013, 1627007, 1628051, 1629007, 1630019, 1631023, 1632013, 1633007, 1634011, 1635013, 1636001, 1637029, 1638011, 1639019, 1640017, 1641007, 1642021, 1643003, 1644001, 1645003, 1646017, 1647001, 1648001, 1649003, 1650001, 1651007, 1652011, 1653007, 1654013, 1655021, 1656007, 1657001, 1658009, 1659011, 1660007, 1661003, 1662007, 1663009, 1664009, 1665007, 1666003, 1667033, 1668001, 1669027, 1670003, 1671041, 1672003, 1673011, 1674011, 1675001, 1676023, 1677001, 1678009, 1679009, 1680013, 1681003, 1682017, 1683007, 1684019, 1685011, 1686017, 1687009, 1688041, 1689031, 1690009, 1691003, 1692013, 1693001, 1694023, 1695041, 1696001, 1697027, 1698001, 1699001, 1700021, 1701017, 1702009, 1703041, 1704023, 1705001, 1706009, 1707067, 1708009, 1709009, 1710011, 1711019, 1712017, 1713007, 1714003, 1715033, 1716037, 1717007, 1718011, 1719001, 1720003, 1721003, 1722013, 1723003, 1724027, 1725011, 1726003, 1727021, 1728017, 1729001, 1730041, 1731007, 1732037, 1733003, 1734011, 1735001, 1736029, 1737007, 1738003, 1739009, 1740041, 1741007, 1742017, 1743013, 1744007, 1745011, 1746007, 1747001, 1748003, 1749001, 1750009, 1751011, 1752001, 1753007, 1754033, 1755023, 1756009, 1757033, 1758007, 1759003, 1760021, 1761029, 1762031, 1763011, 1764001, 1765013, 1766003, 1767001, 1768001, 1769017, 1770001, 1771027, 1772003, 1773007, 1774007, 1775009, 1776011, 1777007, 1778003, 1779007, 1780001, 1781009, 1782043, 1783009, 1784021, 1785001, 1786021, 1787011, 1788011, 1789001, 1790029, 1791017, 1792013, 1793017, 1794007, 1795007, 1796009, 1797011, 1798001, 1799003, 1800017, 1801003, 1802029, 1803001, 1804007, 1805003, 1806001, 1807027, 1808003, 1809029, 1810001, 1811041, 1812037, 1813001, 1814003, 1815001, 1816007, 1817009, 1818013, 1819007, 1820009, 1821013, 1822003, 1823009, 1824001, 1825003, 1826003, 1827017, 1828003, 1829011, 1830011, 1831001, 1832011, 1833001, 1834031, 1835003, 1836011, 1837007, 1838033, 1839001, 1840019, 1841003, 1842011, 1843003, 1844021, 1845017, 1846001, 1847023, 1848013, 1849013, 1850021, 1851019, 1852003, 1853011, 1854011, 1855001, 1856003, 1857001, 1858007, 1859009, 1860007, 1861001, 1862009, 1863011, 1864001, 1865011, 1866001, 1867001, 1868017, 1869029, 1870019, 1871017, 1872001, 1873013, 1874003, 1875007, 1876009, 1877003, 1878013, 1879049, 1880017, 1881031, 1882009, 1883003, 1884007, 1885007, 1886011, 1887013, 1888031, 1889009, 1890019, 1891007, 1892017, 1893029, 1894001, 1895009, 1896001, 1897001, 1898009, 1899017, 1900009, 1901021, 1902007, 1903003, 1904011, 1905017, 1906007, 1907023, 1908013, 1909003, 1910009, 1911011, 1912019, 1913003, 1914001, 1915007, 1916021, 1917001, 1918003, 1919009, 1920001, 1921013, 1922027, 1923013, 1924003, 1925017, 1926007, 1927007, 1928011, 1929043, 1930021, 1931009, 1932001, 1933007, 1934021, 1935007, 1936021, 1937003, 1938007, 1939009, 1940041, 1941013, 1942001, 1943021, 1944011, 1945003, 1946011, 1947041, 1948021, 1949023, 1950017, 1951003, 1952021, 1953001, 1954003, 1955021, 1956001, 1957013, 1958029, 1959011, 1960009, 1961021, 1962001, 1963001, 1964009, 1965077, 1966007, 1967011, 1968017, 1969001, 1970029, 1971007, 1972007, 1973011, 1974029, 1975019, 1976011, 1977023, 1978021, 1979039, 1980019, 1981037, 1982011, 1983001, 1984007, 1985003, 1986001, 1987003, 1988011, 1989007, 1990007, 1991027, 1992031, 1993031, 1994033, 1995011, 1996013, 1997003, 1998019, 1999007 };
            
            // 최대 허용량
            public int Capacity => buckets.Length;

            // 개수
            public int Count { get; set; }

            private int poolIdx;
            private int poolCount;

            int[] buckets;      // 시작 인덱스 + 1 값을 담는다.
            Node[] nodes;       // 담는 내용물이 있다.

            public MyDictionary(int _capacity)
            {

                if (_capacity <= 0) _capacity = 1;
                else if (_capacity >= 1_999_000) throw new Exception("용량 초과입니다.");
                int idx = 1 + _capacity / 1_000;

                buckets = new int[primes[idx]];
                nodes = new Node[primes[idx]];
                Count = 0;

                poolCount = 0;
                poolIdx = 0;
            }

            public TVal this[TKey _key]
            {

                get
                {

                    ref TVal val = ref FindValue(_key);
                    if (!Unsafe.IsNullRef(ref val)) return val;
                    return default;
                }

                set
                {

                    TryInsert(_key, value);
                }
            }

            public void Add(TKey _key, TVal _val)
            {

                TryInsert(_key, _val);
            }

            private bool TryInsert(TKey _key, TVal _val)
            {

                if (_key == null) throw new ArgumentNullException("키는 null이 될 수 없습니다.");

                uint hashCode = (uint)_key.GetHashCode();
                ref int bucket = ref GetBucket(hashCode);
                int idx = bucket - 1;
                uint collisionCount = 0;

                while (idx >= 0)
                {

                    if (nodes[idx].hashCode == hashCode && EqualityComparer<TKey>.Default.Equals(_key, nodes[idx].key))
                    {

                        nodes[idx].val = _val;
                        return true;
                    }

                    idx = nodes[idx].next - 1;
                    collisionCount++;
                    if (collisionCount > (uint)nodes.Length) break;
                }
                
                if (poolCount > 0)
                {

                    idx = -poolIdx - 1;
                    poolCount--;
                    if (poolCount > 0) poolIdx = nodes[poolIdx].next;
                    else poolIdx = 0;
                }
                else
                {

                    if (Count == nodes.Length) Resize(nodes.Length);
                    idx = Count;
                    Count++;
                }

                nodes[idx].hashCode = hashCode;
                nodes[idx].key = _key;
                nodes[idx].val = _val;
                nodes[idx].next = bucket;
                bucket = idx + 1;

                return true;
            }

            public bool Remove(TKey _key)
            {

                if (_key == null) throw new ArgumentNullException("키는 null이 될 수 없습니다.");

                uint collisionCount = 0;
                uint hashCode = (uint)_key.GetHashCode();
                ref int bucket = ref GetBucket(hashCode);

                int last = -1;
                int i = bucket - 1;

                while (i >= 0)
                {

                    ref Node curNode = ref nodes[i];

                    if (curNode.hashCode == hashCode && EqualityComparer<TKey>.Default.Equals(curNode.key, _key))
                    {

                        if (last < 0) bucket = curNode.next;
                        else nodes[last].next = curNode.next;

                        if (poolCount == 0) nodes[i].next = 0;
                        else nodes[i].next = poolIdx;
                        poolIdx = -i;
                        poolCount++;

                        return true;
                    }

                    last = i;
                    i = curNode.next - 1;

                    collisionCount++;
                    if (collisionCount > nodes.Length) break;
                }

                return false;
            }

            public bool ContainsKey(TKey _key) 
                => !Unsafe.IsNullRef(ref FindValue(_key));

            private ref TVal FindValue(TKey _key)
            {

                if (_key == null) throw new ArgumentNullException("키는 null이 될 수 없습니다.");

                uint hashCode = (uint)_key.GetHashCode();
                int i = GetBucket(hashCode) - 1;

                int collisionCount = 0;

                while (i >= 0)
                {

                    ref Node node = ref nodes[i];
                    if (node.hashCode == hashCode && EqualityComparer<TKey>.Default.Equals(node.key, _key)) return ref node.val;

                    i = node.next - 1;
                    collisionCount++;
                    if (collisionCount > nodes.Length) break;
                }

                return ref Unsafe.NullRef<TVal>();
            }

            void Resize(int _capacity)
            {

                int nextIdx = 1 + _capacity / 1_000;
                if (primes.Length <= nextIdx) throw new Exception("사용할 수 있는 범위를 초과합니다.");

                Node[] newEntries = new Node[primes[nextIdx]];
                int count = Count;
                Array.Copy(nodes, newEntries, count);
                buckets = new int[primes[nextIdx]];

                for (int i = 0; i < count; i++)
                {

                    if (nodes[i].next > 0)
                    {

                        ref int bucket = ref GetBucket(nodes[i].hashCode);
                        nodes[i].next = bucket;
                        bucket = i + 1;
                    }
                }

                nodes = newEntries;
            }

            ref int GetBucket(uint _hashCode)
            {

                return ref buckets[_hashCode % (uint)buckets.Length];
            }

            public void Clear()
            {

                Array.Clear(buckets);
                Array.Clear(nodes, 0, Count);
                Count = 0;
                poolCount = 0;
                poolIdx = 0;
            }

            public IEnumerator<KeyValuePair<TKey, TVal>> GetEnumerator()
            {

                for (int i = 0; i < buckets.Length; i++)
                {

                    if (buckets[i] == 0) continue;
                    int idx = buckets[i] - 1;
                    while (idx >= 0)
                    {

                        yield return new KeyValuePair<TKey, TVal>(key: nodes[idx].key, value: nodes[idx].val);
                        idx = nodes[idx].next - 1;
                    }
                }
            }

            struct Node
            {

                public uint hashCode;
                public int next;
                public TKey key;
                public TVal val;
            }
        }

        static void Main(string[] args)
        {

#if first
            int n;
            Dictionary<long, int> dic;

            Solve();
            void Solve()
            {

                Input();

                GetRet();
            }

            void GetRet()
            {

                int cnt = 0;
                long ret = 0;

                foreach (var item in dic)
                {

                    if (cnt < item.Value)
                    {

                        cnt = item.Value;
                        ret = item.Key;
                    }
                    else if (cnt == item.Value && item.Key < ret) ret = item.Key;
                }

                Console.Write(ret);
            }

            void Input()
            {

                StreamReader sr = new(Console.OpenStandardInput(), bufferSize: 65536);
                n = (int)ReadLong();
                dic = new(n);
                for (int i = 0; i < n; i++)
                {

                    long key = ReadLong();
                    if (dic.ContainsKey(key)) dic[key]++;
                    else dic[key] = 1;
                }

                sr.Close();

                long ReadLong()
                {

                    int c = sr.Read();
                    bool positive = c != '-';
                    long ret = positive ? c - '0' : 0;
                    while((c = sr.Read()) != -1 && c != ' ' && c != '\n')
                    {

                        if (c == '\r') continue;
                        ret = ret * 10 + c - '0';
                    }

                    return positive ? ret : -ret;
                }
            }
#else

            MyDictionary<long, int> myDic;
            int n;

            Solve();
            void Solve()
            {

                Input();

                GetRet();
            }

            void GetRet()
            {

                long ret = 0;
                int cnt = 0;
                foreach(var item in myDic)
                {

                    if (cnt < item.Value)
                    {

                        cnt = item.Value;
                        ret = item.Key;
                    }
                    else if (cnt == item.Value && item.Key < ret) ret = item.Key;
                }

                Console.Write(ret);
            }

            void Input()
            {

                StreamReader sr = new(Console.OpenStandardInput(), bufferSize: 65536);
                n = (int)ReadLong();

                myDic = new(n);
                for (int i = 0; i < n; i++)
                {

                    long key = ReadLong();
                    if (myDic.ContainsKey(key)) myDic[key]++;
                    else myDic[key] = 1;
                }

                sr.Close();

                long ReadLong()
                {

                    int c = sr.Read();
                    bool positive = c != '-';

                    long ret = positive ? c - '0' : 0;

                    while((c = sr.Read()) != -1 && c != ' ' && c != '\n')
                    {

                        if (c == '\r') continue;
                        ret = ret * 10 + c - '0';
                    }

                    return positive ? ret : -ret;
                }
            }
#endif
        }

    }
}
